/******************************************************************************
 * Copyright 2016 Edinson E. PadrÃ³n Urdaneta
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *****************************************************************************/

/* ***************************************************************************/
package com.github.epadronu.balin.core
/* ***************************************************************************/

/* ***************************************************************************/
import com.github.epadronu.balin.config.Configuration
import com.github.epadronu.balin.config.ConfigurationBuilder
import com.github.epadronu.balin.config.ConfigurationSetup
import com.github.epadronu.balin.exceptions.MissingPageUrlException
import com.github.epadronu.balin.exceptions.PageImplicitAtVerificationException
import org.openqa.selenium.WebDriver
/* ***************************************************************************/

/* ***************************************************************************/
/**
 * Balin's backbone. The `Browser` interface binds together the different
 * abstractions that form part of the library.
 *
 * Additionally, this interface defines the entry point for the Domain-Specific
 * Language which Balin is built around.
 */
interface Browser : JavaScriptSupport, WaitingSupport, WebDriver {

    companion object {
        /**
         * The builder in charge of generating the configuration.
         */
        private val configurationBuilder: ConfigurationBuilder = ConfigurationBuilder()

        /**
         * The name of the property that dictates which setup to use.
         */
        internal const val BALIN_SETUP_NAME_PROPERTY: String = "balin.setup.name"

        /**
         * Retrieves the configuration generated by the builder, taking in
         * account the value of the [BALIN_SETUP_NAME_PROPERTY] property.
         */
        internal val desiredConfiguration: ConfigurationSetup
            get() = configurationBuilder.build().run {
                setups[System.getProperty(BALIN_SETUP_NAME_PROPERTY) ?: "default"] ?: this
            }

        /**
         * Domain-Specific language that let's you configure Balin's global
         * behavior.
         *
         * @sample com.github.epadronu.balin.config.ConfigurationTests.call_the_configure_method_and_make_changes
         *
         * @param block here you can interact with the DSL.
         */
        fun configure(block: ConfigurationBuilder.() -> Unit) {
            block(configurationBuilder)
        }

        /**
         * This method represents the entry point for the Domain-Specific
         * Language which Balin is built around.
         *
         * `drive` is the main abstraction layer for Selenium-WebDriver. Inside
         * the [block] it receives as parameter, you can interact with the
         * driver and use all the features Balin has to offer.
         *
         * @sample com.github.epadronu.balin.core.BrowserTests.perform_a_simple_web_navigation
         *
         * @param driverFactory provides the driver on which the navigation and interactions will be performed.
         * @param autoQuit indicates if the driver should quit at the end of the [block].
         * @param block here you interact with the driver alongside of Balin's assistance.
         */
        fun drive(
            driverFactory: () -> WebDriver = desiredConfiguration.driverFactory,
            autoQuit: Boolean = desiredConfiguration.autoQuit,
            block: Browser.() -> Unit) = drive(Configuration(autoQuit, driverFactory), block)

        /**
         * This method represents the entry point for the Domain-Specific
         * Language which Balin is built around.
         *
         * `drive` is the main abstraction layer for Selenium-WebDriver. Inside
         * the [block] it receives as parameter, you can interact with the
         * driver and use all the features Balin has to offer.
         *
         * @sample com.github.epadronu.balin.core.BrowserTests.perform_a_simple_web_navigation
         *
         * @param configuration defines Balin's local behavior for [block] only.
         * @param block here you interact with the driver alongside of Balin's assistance.
         */
        fun drive(configuration: Configuration, block: Browser.() -> Unit) {
            val desiredConfiguration = configuration.run {
                setups[System.getProperty(BALIN_SETUP_NAME_PROPERTY) ?: "default"] ?: this
            }

            BrowserImpl(desiredConfiguration).apply {
                try {
                    block()
                } catch (throwable: Throwable) {
                    throw throwable
                } finally {
                    if (configurationSetup.autoQuit) {
                        quit()
                    }
                }
            }
        }
    }

    /**
     * The configuration setup used to customized Balin's behavior.
     */
    val configurationSetup: ConfigurationSetup

    /**
     * Tells the browser at what page it should be located.
     *
     * If the page defines an _implicit at verification_, then it will be
     * invoked immediately. If such verification fails, Balin will throw a
     * [PageImplicitAtVerificationException] in order to perform an early
     * failure.
     *
     * @sample com.github.epadronu.balin.core.BrowserTests.model_a_page_into_a_Page_Object_and_interact_with_it_via_the_at_method
     *
     * @param T the page's type.
     * @param factory provides an instance of the page given the driver being used by the browser.
     * @Returns An instance of the current page.
     * @throws PageImplicitAtVerificationException if the page has an _implicit at verification_ which have failed.
     */
    fun <T : Page> at(factory: (Browser) -> T): T = factory(this).apply {
        if (!verifyAt()) {
            throw PageImplicitAtVerificationException()
        }
    }

    /**
     * Navigates to the given page.
     *
     * If the page has not defined a URL, then a
     * [MissingPageUrlException] will be thrown immediately since
     * is not possible to perform the navigation.
     *
     * If the page defines an _implicit at verification_, then it
     * will be invoked immediately. If such verification fails, Balin
     * will throw a [PageImplicitAtVerificationException] in order to
     * perform an early failure.
     *
     * @sample com.github.epadronu.balin.core.BrowserTests.perform_a_simple_web_navigation
     *
     * @param T the page's type.
     * @param factory provides an instance of the page given the driver being used by the browser.
     * @Returns An instance of the current page.
     * @throws MissingPageUrlException if the page has not defined a URL.
     * @throws PageImplicitAtVerificationException if the page has an _implicit at verification_ which have failed.
     * @see org.openqa.selenium.WebDriver.get
     */
    fun <T : Page> to(factory: (Browser) -> T): T = factory(this).apply {
        get(url ?: throw MissingPageUrlException())

        if (!verifyAt()) {
            throw PageImplicitAtVerificationException()
        }
    }

    /**
     * Navigates to the given URL.
     *
     * @param url the URL the browser will navigate to.
     * @return The browser's current URL.
     *
     * @see org.openqa.selenium.WebDriver.get
     */
    fun to(url: String): String {
        get(url)

        return currentUrl
    }
}
/* ***************************************************************************/
